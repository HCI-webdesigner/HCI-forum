-- phpMyAdmin SQL Dump
-- version 3.5.8.1deb1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Jul 21, 2013 at 05:36 PM
-- Server version: 5.5.31-0ubuntu0.13.04.1
-- PHP Version: 5.4.9-4ubuntu2.2

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `hciForum`
--

-- --------------------------------------------------------

--
-- Table structure for table `post`
--

CREATE TABLE IF NOT EXISTS `post` (
  `id` int(6) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL,
  `content` longtext NOT NULL,
  `type` int(1) NOT NULL,
  `point` int(5) NOT NULL DEFAULT '0',
  `deleted` int(1) NOT NULL,
  `post_date` datetime NOT NULL,
  `state` int(1) NOT NULL,
  `board_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `board_id` (`board_id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=50 ;

--
-- Dumping data for table `post`
--

INSERT INTO `post` (`id`, `title`, `content`, `type`, `point`, `deleted`, `post_date`, `state`, `board_id`, `user_id`) VALUES
(4, '1', 'HTTP代理是最经典最常见的代理协议。其用途非常广泛，普遍见于公司内网环境，一般员工都需要给浏览器配置一个HTTP代理才能访问互联网。起初，HTTP代理也用来翻越G*W，但是因为G*W不断发展，普通的HTTP代理早已无效了。但是，基于仍然有不少人使用明文的HTTP代理协议结合 stunnel之类的软件进行加密翻Q，有时这种代理又被称为HTTPS代理。再后来，又出现了WebVpn via Spdy之类的代理协议，特点是Chrome浏览器直接支持。再加上HTTP代理协议可以代理什么？是只能代理HTTP还是也可以代理HTTPS，还是可 以用来实现SOCKS代理？总之，非常混乱。在fqsocks项目里用python实现了HTTP代理的各种主流变种，终于明白了不同称谓之后的真正含义。本文试图总结一二。\n\n代理基础\n\n所有的代理，其原理都是类似的。其网络拓扑结构都是这样的：\n\n[客户端] <-TCP连接-> [代理] <-TCP连接-> [服务器]\n代理左手拿着与客户端的连接，右手拿着与服务器的连接，然后在两个TCP连接之间做数据的对拷。各种不同的代理协议，不同的只是TCP连接之上跑的 是什么的协议，数据是怎么经过包装，拆包的。不存在客户端与服务器之间建立TCP连接的情况。只有VPN这种在IP包这一层工作的，才能实现客户端与服务 器的之间连接。', 0, 0, 0, '2013-07-16 00:00:00', 0, 1, 10),
(5, '2', 'HTTP代理是最经典最常见的代理协议。其用途非常广泛，普遍见于公司内网环境，一般员工都需要给浏览器配置一个HTTP代理才能访问互联网。起初，HTTP代理也用来翻越G*W，但是因为G*W不断发展，普通的HTTP代理早已无效了。但是，基于仍然有不少人使用明文的HTTP代理协议结合 stunnel之类的软件进行加密翻Q，有时这种代理又被称为HTTPS代理。再后来，又出现了WebVpn via Spdy之类的代理协议，特点是Chrome浏览器直接支持。再加上HTTP代理协议可以代理什么？是只能代理HTTP还是也可以代理HTTPS，还是可 以用来实现SOCKS代理？总之，非常混乱。在fqsocks项目里用python实现了HTTP代理的各种主流变种，终于明白了不同称谓之后的真正含义。本文试图总结一二。\n\n代理基础\n\n所有的代理，其原理都是类似的。其网络拓扑结构都是这样的：\n\n[客户端] <-TCP连接-> [代理] <-TCP连接-> [服务器]\n代理左手拿着与客户端的连接，右手拿着与服务器的连接，然后在两个TCP连接之间做数据的对拷。各种不同的代理协议，不同的只是TCP连接之上跑的 是什么的协议，数据是怎么经过包装，拆包的。不存在客户端与服务器之间建立TCP连接的情况。只有VPN这种在IP包这一层工作的，才能实现客户端与服务 器的之间连接。', 0, 0, 0, '2013-07-16 00:00:00', 0, 2, 10),
(6, '3', 'HTTP代理是最经典最常见的代理协议。其用途非常广泛，普遍见于公司内网环境，一般员工都需要给浏览器配置一个HTTP代理才能访问互联网。起初，HTTP代理也用来翻越G*W，但是因为G*W不断发展，普通的HTTP代理早已无效了。但是，基于仍然有不少人使用明文的HTTP代理协议结合 stunnel之类的软件进行加密翻Q，有时这种代理又被称为HTTPS代理。再后来，又出现了WebVpn via Spdy之类的代理协议，特点是Chrome浏览器直接支持。再加上HTTP代理协议可以代理什么？是只能代理HTTP还是也可以代理HTTPS，还是可 以用来实现SOCKS代理？总之，非常混乱。在fqsocks项目里用python实现了HTTP代理的各种主流变种，终于明白了不同称谓之后的真正含义。本文试图总结一二。\n\n代理基础\n\n所有的代理，其原理都是类似的。其网络拓扑结构都是这样的：\n\n[客户端] <-TCP连接-> [代理] <-TCP连接-> [服务器]\n代理左手拿着与客户端的连接，右手拿着与服务器的连接，然后在两个TCP连接之间做数据的对拷。各种不同的代理协议，不同的只是TCP连接之上跑的 是什么的协议，数据是怎么经过包装，拆包的。不存在客户端与服务器之间建立TCP连接的情况。只有VPN这种在IP包这一层工作的，才能实现客户端与服务 器的之间连接。', 0, 0, 0, '2013-07-16 00:00:00', 0, 3, 10),
(7, '4', 'HTTP代理是最经典最常见的代理协议。其用途非常广泛，普遍见于公司内网环境，一般员工都需要给浏览器配置一个HTTP代理才能访问互联网。起初，HTTP代理也用来翻越G*W，但是因为G*W不断发展，普通的HTTP代理早已无效了。但是，基于仍然有不少人使用明文的HTTP代理协议结合 stunnel之类的软件进行加密翻Q，有时这种代理又被称为HTTPS代理。再后来，又出现了WebVpn via Spdy之类的代理协议，特点是Chrome浏览器直接支持。再加上HTTP代理协议可以代理什么？是只能代理HTTP还是也可以代理HTTPS，还是可 以用来实现SOCKS代理？总之，非常混乱。在fqsocks项目里用python实现了HTTP代理的各种主流变种，终于明白了不同称谓之后的真正含义。本文试图总结一二。\n\n代理基础\n\n所有的代理，其原理都是类似的。其网络拓扑结构都是这样的：\n\n[客户端] <-TCP连接-> [代理] <-TCP连接-> [服务器]\n代理左手拿着与客户端的连接，右手拿着与服务器的连接，然后在两个TCP连接之间做数据的对拷。各种不同的代理协议，不同的只是TCP连接之上跑的 是什么的协议，数据是怎么经过包装，拆包的。不存在客户端与服务器之间建立TCP连接的情况。只有VPN这种在IP包这一层工作的，才能实现客户端与服务 器的之间连接。', 3, 0, 0, '2013-07-16 00:00:00', 0, 4, 10),
(8, '这里是标题', '这里是内容', 1, 15, 0, '0000-00-00 00:00:00', 0, 6, 14),
(9, '这里是标题', '这里是内容', 1, 15, 0, '2013-07-20 00:00:00', 0, 6, 14),
(10, '前端', '阿金斯克的阿斯顿阿斯顿阿斯顿阿斯顿啊都是', 0, 10, 0, '2013-07-20 00:00:00', 0, 1, 14),
(11, '还是前端', '阿斯顿阿斯顿 速度达阿斯顿\r\n阿斯顿\r\n\r\n大阿斯顿阿斯顿\r\n阿斯顿', 2, 20, 0, '2013-07-20 00:00:00', 0, 1, 14),
(12, '123', '123', 0, 0, 0, '2013-07-20 00:00:00', 0, 1, 14),
(13, 'test', 'test', 0, 0, 0, '2013-07-20 00:00:00', 0, 14, 14),
(15, 'etst', 'etst', 0, 0, 0, '2013-07-20 00:00:00', 0, 21, 14),
(19, 'test again', 'testagain', 0, 0, 0, '2013-07-20 00:00:00', 0, 1, 14),
(20, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(21, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(22, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(23, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(24, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(25, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(26, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(27, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(28, 'test23333333', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 6, 14),
(29, 'aaaaaa', '23333333333333333333', 0, 0, 0, '2013-07-20 00:00:00', 0, 11, 14),
(30, 'hahahah', 'asda sd asd asd asd\r\nasd asd asda sd asd a', 0, 0, 0, '2013-07-20 00:00:00', 0, 17, 14),
(31, 'asdasda', 'sdasdasdasdasd', 0, 0, 0, '2013-07-20 00:00:00', 0, 11, 14),
(32, 'asdasda', 'sdasdasdasdasd', 0, 0, 0, '2013-07-20 00:00:00', 0, 11, 14),
(33, 'asdasda', 'asdasdasdasdsa', 1, 0, 0, '2013-07-20 00:00:00', 0, 16, 14),
(34, '这里好冷清。。。', '真的好冷清。。。', 3, 0, 0, '2013-07-20 00:00:00', 0, 13, 14),
(43, '123', '123', 0, 0, 0, '2013-07-21 00:00:00', 0, 2, 14),
(44, '灌水', '23333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333', 2, 0, 0, '2013-07-21 00:00:00', 0, 24, 14),
(45, '23333333333', '2333333333333333333333333333333333333', 0, 15, 0, '2013-07-21 00:00:00', 0, 26, 14),
(46, 'time', 'time', 0, 0, 0, '2013-07-21 05:31:34', 0, 9, 14),
(47, '时间', '时间', 0, 0, 0, '2013-07-21 05:33:19', 0, 5, 14),
(48, '还是时间', '还是时间', 0, 0, 0, '2013-07-21 17:33:47', 0, 16, 14),
(49, '继续测试时间', '时间', 0, 0, 0, '2013-07-21 17:34:09', 0, 14, 14);

--
-- Constraints for dumped tables
--

--
-- Constraints for table `post`
--
ALTER TABLE `post`
  ADD CONSTRAINT `board_id` FOREIGN KEY (`board_id`) REFERENCES `board` (`id`),
  ADD CONSTRAINT `user_id` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
